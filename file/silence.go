// Code generated by go-bindata.
// sources:
// Silence.mp3
// DO NOT EDIT!

package file

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _silenceMp3 = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x90\x3f\x4f\xc2\x40\x18\xc6\x1f\x1d\x5c\x4c\x0c\x38\xb8\x99\xbc\x1b\xba\x34\xd7\xd6\x60\x1c\x4b\x01\xff\xc4\x96\x46\x6e\x71\x6c\xda\x0b\x54\x9b\x23\xe9\x1f\x89\xab\xdf\xc3\x6f\xe2\xc0\xe0\x37\x71\xf4\x43\x60\xa0\xa0\x09\x8b\xb9\x0e\x2c\xdc\x6f\xba\xf6\xde\x5f\x9e\xf7\xb9\xdb\xae\xbd\x0f\x00\xcd\x53\x1e\x98\xc0\x09\x1c\x19\x67\x62\x4a\x77\x93\xb1\xa4\x9b\x30\x8b\xa7\x49\xf4\x0c\xee\x7a\x40\x0b\xfe\x44\x0a\x3a\x7b\x2a\xf3\x82\xe2\x64\x94\x14\x61\x9a\xbe\x52\x94\x89\xb0\x10\x31\xe5\x49\x2a\x64\x24\xce\xc1\x9d\x7b\xe0\x10\xc3\xc5\x77\x41\x6e\x17\xfc\xb1\x07\x1c\xc0\x62\xcc\x86\x3b\xf0\x80\x06\x84\x1c\x25\xbc\x94\xc1\xb5\x13\x80\x01\xbc\xe7\x03\x4d\x2c\x7e\x89\x9c\x5e\x2e\x0d\xdb\xb0\x8c\x76\x35\x3c\x5e\x0f\xfb\x83\x07\x0f\xc4\x56\xfc\x7f\xb0\x2f\x14\x86\x19\xab\xd2\xde\xd6\x69\x43\x2f\xe8\x6c\xa6\x59\xe6\xea\xd0\xbe\xea\xff\x5e\x2d\x2f\x3a\xa6\xb9\x31\x6b\xb3\xbe\x52\xfc\xdf\x1e\x9c\x5b\xc0\x51\xf5\x7e\x91\x20\x66\x52\x0e\x8d\x46\xa3\xd1\x68\x76\x91\xf9\x57\x63\x06\x60\xef\x43\xd1\x69\xd5\x70\x7c\x65\xe7\x78\x56\x2a\x3a\xcb\xa0\xf7\x1a\xcb\x7d\xd6\x70\xbe\x6b\x14\x9a\xd7\x29\xa4\x2a\x6d\xcf\xd1\x85\x74\xa1\xad\x3a\x3f\x01\x00\x00\xff\xff\xcb\x82\x87\x81\x58\x0d\x00\x00"

func silenceMp3Bytes() ([]byte, error) {
	return bindataRead(
		_silenceMp3,
		"Silence.mp3",
	)
}

func silenceMp3() (*asset, error) {
	bytes, err := silenceMp3Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Silence.mp3", size: 3416, mode: os.FileMode(436), modTime: time.Unix(1502676418, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Silence.mp3": silenceMp3,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"Silence.mp3": &bintree{silenceMp3, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
